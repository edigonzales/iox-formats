plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

version '1.0.2'+System.getProperty('release','-SNAPSHOT')

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'io.github.sogis'
//group = 'ch.so.agi'

repositories {
    maven { 
        url "https://repo.osgeo.org/repository/release/" 
        /*
        url "http://localhost:8080/osgeo"
        allowInsecureProtocol = true
        credentials {
            // Sollte ein anderer User sein. Nur zum Ausprobieren dieser sogeo-User.
            username "${sogeoRepositoryUsername}"
            password "${sogeoRepositoryPassword}"
        }
        authentication {
            basic(BasicAuthentication)
        }*/ 
    }
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jars.interlis.ch"
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    testImplementation 'org.testcontainers:testcontainers:1.17.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.2'
    testImplementation 'org.testcontainers:postgresql:1.17.2'
    testImplementation 'org.postgresql:postgresql:42.6.0'

    api 'ch.interlis:iox-wkf:2.0.0'
    
    api 'org.apache.poi:poi:5.2.3'
    api 'org.apache.poi:poi-ooxml:5.2.3'
    api 'commons-io:commons-io:2.6'
    
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
publishing {
    repositories {
        maven {
            name = "sogeoRepository"
            url = "http://localhost:8080/snapshots"
            allowInsecureProtocol = true
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            //groupId = "com.example"
            //artifactId = "library"
            //version = "1.0.0"
            from components.java
        }
    }
}
*/

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "iox-formats"
                url = "https://github.com/sogis/iox-formats"
                description = "iox-formats"
                scm {
                    connection = "scm:git:https@github.com/sogis/iox-formats"
                    developerConnection = "scm:git:https@github.com/sogis/iox-formats"
                    url = "https://github.com/sogis/iox-formats"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://github.com/sogis/iox-formats/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "edigonzales"
                        name = "Stefan Ziegler"
                    }
                }
            }
        }
    }
}

if (!version.toString().endsWith("SNAPSHOT")) {
    signing {
        sign publishing.publications.mavenJava
    }
}

nexusPublishing {
    repositories {
        sonatype { 
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
}